// Generated by view binder compiler. Do not edit!
package com.dicoding.auliarosyida.myservice.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.dicoding.auliarosyida.myservice.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnStartBoundService;

  @NonNull
  public final Button btnStartJobIntentService;

  @NonNull
  public final Button btnStartService;

  @NonNull
  public final Button btnStopBoundService;

  private ActivityMainBinding(@NonNull LinearLayout rootView, @NonNull Button btnStartBoundService,
      @NonNull Button btnStartJobIntentService, @NonNull Button btnStartService,
      @NonNull Button btnStopBoundService) {
    this.rootView = rootView;
    this.btnStartBoundService = btnStartBoundService;
    this.btnStartJobIntentService = btnStartJobIntentService;
    this.btnStartService = btnStartService;
    this.btnStopBoundService = btnStopBoundService;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_start_bound_service;
      Button btnStartBoundService = rootView.findViewById(id);
      if (btnStartBoundService == null) {
        break missingId;
      }

      id = R.id.btn_start_job_intent_service;
      Button btnStartJobIntentService = rootView.findViewById(id);
      if (btnStartJobIntentService == null) {
        break missingId;
      }

      id = R.id.btn_start_service;
      Button btnStartService = rootView.findViewById(id);
      if (btnStartService == null) {
        break missingId;
      }

      id = R.id.btn_stop_bound_service;
      Button btnStopBoundService = rootView.findViewById(id);
      if (btnStopBoundService == null) {
        break missingId;
      }

      return new ActivityMainBinding((LinearLayout) rootView, btnStartBoundService,
          btnStartJobIntentService, btnStartService, btnStopBoundService);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
