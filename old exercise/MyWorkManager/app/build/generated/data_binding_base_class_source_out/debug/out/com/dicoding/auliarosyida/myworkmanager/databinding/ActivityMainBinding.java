// Generated by view binder compiler. Do not edit!
package com.dicoding.auliarosyida.myworkmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.dicoding.auliarosyida.myworkmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button btnCancelTask;

  @NonNull
  public final Button btnOneTimeTask;

  @NonNull
  public final Button btnPeriodicTask;

  @NonNull
  public final EditText editCity;

  @NonNull
  public final TextView textStatus;

  private ActivityMainBinding(@NonNull LinearLayout rootView, @NonNull Button btnCancelTask,
      @NonNull Button btnOneTimeTask, @NonNull Button btnPeriodicTask, @NonNull EditText editCity,
      @NonNull TextView textStatus) {
    this.rootView = rootView;
    this.btnCancelTask = btnCancelTask;
    this.btnOneTimeTask = btnOneTimeTask;
    this.btnPeriodicTask = btnPeriodicTask;
    this.editCity = editCity;
    this.textStatus = textStatus;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCancelTask;
      Button btnCancelTask = rootView.findViewById(id);
      if (btnCancelTask == null) {
        break missingId;
      }

      id = R.id.btnOneTimeTask;
      Button btnOneTimeTask = rootView.findViewById(id);
      if (btnOneTimeTask == null) {
        break missingId;
      }

      id = R.id.btnPeriodicTask;
      Button btnPeriodicTask = rootView.findViewById(id);
      if (btnPeriodicTask == null) {
        break missingId;
      }

      id = R.id.editCity;
      EditText editCity = rootView.findViewById(id);
      if (editCity == null) {
        break missingId;
      }

      id = R.id.textStatus;
      TextView textStatus = rootView.findViewById(id);
      if (textStatus == null) {
        break missingId;
      }

      return new ActivityMainBinding((LinearLayout) rootView, btnCancelTask, btnOneTimeTask,
          btnPeriodicTask, editCity, textStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
